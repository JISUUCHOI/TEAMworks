<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
"-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="documentMapper">

	<resultMap id="empInfoResultSet" type="Employee">
		<id column="emp_id" property="empId"/>
		<result column="emp_name" property="empName"/>
		<result column="dept_code" property="deptCode" />
		<result column="dept_name" property="deptName" />
		<result column="job_code" property="jobCode" />
		<result column="job_name" property="jobName" />
	</resultMap>

	<!-- 공통 -->
	<resultMap type="Document" id="documentResultSet">
		<id column="DOC_NO" property="docNo"/>						<!-- 문서코드 -->
		<result column="EMP_ID" property="empId"/>					<!-- 기안자 사원번호 -->
		<result column="DOC_SC" property="docSc"/>					<!-- 기안서, 경조사, 휴가, 제증명 -->
		<result column="DOC_STATUS" property="docStatus"/>			<!-- 0:대기 1: 진행 2: 완료 3: 반려 4:회수 -->
		<result column="DOC_TITLE" property="docTitle"/>			<!-- 문서제목 -->
		<result column="DOC_REFERENCE" property="docReference"/>	<!-- 참조자 사원번호 -->
		<result column="DOC_REFNAME" property="docRefName"/>
		<result column="DOC_DATE" property="docDate"/>				<!-- 기안일자 -->
		<result column="DOC_END" property="docEnd"/>				<!-- 마감일자 -->
		<result column="DOC_DEPARTMENT" property="docDepartment"/>	<!-- 개발팀, 경영지원팀 -->
		
		<!-- 제증명 -->
		<result column="PF_SQ" property="pfSq"/>					<!-- 재직증명서,  경력증명서, 퇴직증명서 -->
		<result column="PF_PURPOSE" property="pfPurpose"/>			<!-- 용도 -->
		<result column="PF_STATUS" property="pfStatus"/>			<!-- 발행확인 되면 Y값 변경 -->
		
		<!-- 기안서 -->
		<result column="DOC_CONTENT" property="docContent"/>		<!-- 문서내용 -->
		<result column="ORIGIN_NAME" property="originName"/>		<!-- 원본명 -->
		<result column="CHANGE_NAME" property="changeName"/>		<!-- 바뀐이름 -->
		
		<result column="approve_status" property="approveStatus"/>
		<result column="emp_name" property="empName"/>
		
		<result column="approver_empid" property="approverEmpid"/>
		<result column="approver_name" property="approverName"/>
		<result column="approve_step" property="approveStep"/>
		<result column="approve_reject" property="approveReject"/>
		<result column="approve_status" property="approveStatus"/>
		<result column="approve_comment" property="approveComment"/>
		<result column="approve_date" property="approveDate"/>
		<result column="job_name" property="jobName"/>
		
	</resultMap>
	
		<select id="selectEmpInfo" parameterType="string" resultMap="empInfoResultSet">
		select emp_id, emp_name, dept_name
		  from employee
		  join department using(dept_code)
		 where emp_id = #{empId} and emp_status = 'Y'
	</select>

	<select id="selectDeptName" resultMap="empInfoResultSet">
		select dept_code, dept_name
		  from department
		 order by dept_code
	</select>


	<select id="selectOrgChart" resultMap="empInfoResultSet">
		select emp_id, emp_name, e.dept_code, dept_name, e.job_code, job_name
		  from employee e
		  join department d on(e.dept_code = d.dept_code)
		  join job j on(e.job_code = j.job_code)
		 where emp_status = 'Y'
         order by e.dept_code, e.job_code
	</select>

	<select id="selectEmpSch" parameterType="com.kh.teamworks.approval.model.vo.ApproveSearchCondition" resultMap="empInfoResultSet">
		select emp_id, emp_name, e.dept_code, dept_name, e.job_code, job_name
		  from employee e
		  join department d on(e.dept_code = d.dept_code)
		  join job j on(e.job_code = j.job_code)
		 where emp_status = 'Y'
		 	<choose>
		 		<when test="deptName != null">
		 					and dept_name like '%' || #{deptName} || '%'
		 			order by job_code
		 		</when>	
		 		<when test="jobName != null">
		 					and job_name like '%' || #{jobName} || '%'
		 			order by dept_code
		 		</when>
		 		<when test="empName != null">
		 					and emp_name like '%' || #{empName} || '%'
		 			order by dept_code, job_code
		 		</when>
		 	</choose>
	</select>
	
	<!-- 제증명신청서 insert -->
	<insert id="insertProof" parameterType="Document">
		insert into proof
		values(#{docNo}, #{empId}, #{docSc}, 0, #{docTitle}, #{docReference}, #{docRefName}, #{docDate}, #{docEnd}, #{docDepartment}, 
				#{pfSq}, #{pfPurpose}, 'Y' )
	</insert>
	
	<!-- 기안서 insert -->
	<insert id="insertDraft" parameterType="Document">
		insert into draft
		values(#{docNo}, #{empId}, #{docSc}, 0, #{docTitle}, #{docReference}, #{docRefName}, #{docDate}, #{docEnd}, #{docDepartment}, 
				#{docContent}, #{originName}, #{changeName} )
	</insert>
	
	<!-- 
	<select id="docListCount" parameterType="Document" resultType="_int">
		select count(*)
		  from draft
		 where emp_id=#{empId} 		
	</select>
	 -->
	
	<!-- 결재요청함 list 조회 -->
	<select id="docList" parameterType="Document" resultMap="documentResultSet">
		select d.doc_no, d.doc_sc, d.doc_title, e.emp_name, d.doc_department, d.doc_date, doc_status
		  from draft d
		  join employee e on(d.emp_id = e.emp_id)
		 where d.emp_id=#{empId}
		 UNION ALL
		select p.doc_no, p.doc_sc, p.doc_title, e.emp_name, p.doc_department, p.doc_date, p.doc_status
 		  from proof p
 		  join employee e on(p.emp_id = e.emp_id)
		 where p.emp_id=#{empId} 
		 order by doc_date asc 
	</select>
	
	<!-- 참조문서함 list 조회 -->
	<select id="referenceList" parameterType="Document" resultMap="documentResultSet">
		select d.doc_no, d.doc_sc, d.doc_title, e.emp_name, d.doc_department, d.doc_date, doc_status
  		  from draft d
 		  join employee e on(d.emp_id = e.emp_id)
 		 where d.DOC_REFERENCE like '%'||#{empId}||'%'
 		 UNION ALL
		select p.doc_no, p.doc_sc, p.doc_title, e.emp_name, p.doc_department, p.doc_date, p.doc_status
 		  from proof p
 		  join employee e on(p.emp_id = e.emp_id)
 		 where p.DOC_REFERENCE like '%'||#{empId}||'%'  
 		 order by doc_date asc
	</select>
	
	<!-- 
	<select id="docListCount" parameterType="Document" resultType="_int">
		select count(*)
		  from draft d
		  join employee e on(d.emp_id = e.emp_id) 
		 where d.emp_id=#{empId}  
	</select>
	 -->	 
	
	<!-- 기안서 상세조회 -->
	<select id="draftDetail" parameterType="Document" resultMap="documentResultSet">
	 	select d.doc_no, e.emp_name, d.doc_sc, d.doc_status, d.doc_title, d.DOC_REFERENCE, d.DOC_REFERENCE, d.DOC_REFNAME,
	 	       d.DOC_END, d.doc_date, d.DOC_DEPARTMENT, d.DOC_CONTENT, d.ORIGIN_NAME, d.CHANGE_NAME
	 	  from draft d
	 	  join employee e on(d.emp_id = e.emp_id)
	 	 where d.doc_no=#{docNo}
	</select>
	
	<!-- 제증명 상세조회 -->
	<select id="proofDetail" parameterType="Document" resultMap="documentResultSet">
		select p.doc_no, p.emp_id, p.doc_sc, p.doc_status, p.doc_title, e.emp_name, p.doc_department, p.doc_date, p.doc_status,
		       p.doc_end, p.doc_reference, p.DOC_REFNAME, p.PF_SQ, p.PF_PURPOSE, p.PF_STATUS, j.job_name
 		  from proof p
 		  join employee e on(p.emp_id = e.emp_id)
 		  join job j on(e.job_code = j.job_code)
	 	 where p.doc_no=#{docNo}
	</select>
	
	<!-- 제증명삭제 -->
	<delete id="deleteProof" parameterType="Document">
		delete from proof where doc_no=#{docNo}
	</delete>
	
	<!-- 기안서삭제 -->
	<delete id="deleteDraft" parameterType="Document">
		delete from draft where doc_no=#{docNo}
	</delete>
	
	

</mapper>





